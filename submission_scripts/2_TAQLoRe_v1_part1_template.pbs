#!/bin/bash
#PBS -q normal
#PBS -l walltime=08:00:00
#PBS -lstorage=scratch/tv28+gdata/tv28+gdata/yf0
#PBS -l mem=64GB
#PBS -l ncpus=12
#PBS -l wd
#PBS -j oe
#PBS -m abe
#PBS -M email@student.unimelb.edu.au
#PBS -N TAQLoRe_v1_CACNA1C

source activate taqlore

echo "Gene of Interest"
# The start site, end site and the chromosome number need to be manually edited in the script!

GENE_ID=ENSG00000151067
GENE=CACNA1C
CHR=chr12
STRAND=+
GENE_START=1970786
GENE_END=2697950

echo "Assigning paths"

EXAMPLES=/path/to/taqlore_dir/TAQLoRe_v1/examples/$GENE
WDIR=/path/to/taqlore_dir/TAQLoRe_v1/workdir
SCRIPTS=/path/to/taqlore_dir/TAQLoRe_v1/scripts

echo "Assigning variables"

GENOME=$WDIR/input/GRCh38.p13.genome_edit.fa
ANNOTATIONS=$WDIR/input/gencode.v34.annotation.gtf
EXISTING_EXONS=$WDIR/input/"$GENE"_ENSEMBL.txt

CHROM_SIZES=$WDIR/input/chrom_sizes.txt


echo "Assigning parameters"

MIN_PROP=0.5
MIN_PROP_ALIGN=0.8 
MIN_INSERT=9
MIN_EXON_DISTANCE=6


DISTANCE_BETWEEN_EXONS=200


MIN_EXON_LENGTH=6
MIN_EXON_COVERAGE_FRACTION=0.7

MIN_INDIVIDUALS=1
MIN_LIBRARIES_PER_INDIVIDUAL=1 
MIN_READ_COUNT=5


READS_IN_SAMPLE_FILTER=1 
NUM_SAMPLES_THRESHOLD=1

echo "Making directories for part 1"

mkdir -p $WDIR/nanoplot_QC_$GENE
mkdir -p $WDIR/LAST_transcriptome_$GENE
mkdir -p $WDIR/LAST_transcriptome_$GENE/alignments_maf
mkdir -p $WDIR/LAST_transcriptome_$GENE/substitution_rate
mkdir -p $WDIR/results_$GENE
mkdir -p $WDIR/results_$GENE/parsed_last_output
mkdir -p $WDIR/results_$GENE/bedgraph_info_novel_exons
mkdir -p $WDIR/results_$GENE/meta_gene_construction


##########################################################################################################
##                                                                                                      ## 
##                                   Starting TAQLoRe Part 1                                            ##
##     for additional info refer to : https://taqlore.readthedocs.io/en/latest/usage_exon_based.html    ##
##                                                                                                      ##
##                                                                                                      ## 
##########################################################################################################


echo "Performing QC with nanoplot on the fasta files"

for filename in $EXAMPLES/*.fa
	do
	base=$(basename $filename .fa)
	echo "On sample : $base"
	
	NanoStat --fasta $EXAMPLES/${base}.fa --outdir $WDIR/nanoplot_QC_$GENE/${base}_statreports

        done
	
echo "Downsampling fasta files to 8K reads"

#for filename in $EXAMPLES/*.fa
#        do
#           base=$(basename $filename .fa)
#                echo "On sample : $base"
#		
#              reformat.sh samplereadstarget=8000 input=$EXAMPLES/${base}.fa output=$EXAMPLES/downsampled_8K/${base}.fa
#	      NanoStat --fasta $EXAMPLES/${base}.fa --outdir $WDIR/nanoplot_QC_$GENE/${base}_statreports
#        done

for filename in $EXAMPLES/*.fa
        do
                base=$(basename $filename .fa)
                echo "On sample : $base"

               lastal $WDIR/LAST_index/transcriptome $EXAMPLES/${base}.fa > $WDIR/LAST_transcriptome_$GENE/alignments_maf/${base}.maf

        done

for filename in $EXAMPLES/*.fa
        do
                base=$(basename $filename .fa)
                echo "On sample : $base"
                        mkdir -p $WDIR/results_$GENE/parsed_last_output/${base}

                        perl $SCRIPTS/parse_maf_transcripts_04.pl \
                        $WDIR/LAST_transcriptome_$GENE/alignments_maf/${base}.maf \
                        $ANNOTATIONS $MIN_PROP $MIN_PROP_ALIGN $MIN_INSERT $MIN_EXON_DISTANCE 4 \
                        $EXAMPLES/${base}.fa $WDIR/LAST_index/genome \
                        $WDIR/results_$GENE/parsed_last_output/${base}
                      
               touch $WDIR/results_$GENE/parsed_last_output/${base}/${base}.parse_maf_transcripts_04.COMPLETED

        done

echo "Obtaining the genomic coordinates for potential novel exons"
# dist parameter in the file is a distance between exons (so the minimum intronic space between exons)

for filename in $EXAMPLES/*.fa
        do
                base=$(basename $filename .fa)
                echo "On sample : $base"
		
		perl $SCRIPTS/parse_maf_annotations.pl $ANNOTATIONS \
		$WDIR/results_$GENE/parsed_last_output/${base}/selected_reads_potential_exons.maf \
		$WDIR/results_$GENE/parsed_last_output/${base}/potential_missing_exons.out \
		$DISTANCE_BETWEEN_EXONS ${base} \
		$WDIR/results_$GENE/parsed_last_output/${base}
			
		touch $WDIR/results_$GENE/parsed_last_output/${base}/${base}.parse_maf_annotations.COMPLETED
		
		done


echo "Filtering out exons that are not in the correct genomic positions for a gene of interest"

for filename in $EXAMPLES/*.fa
        do
                base=$(basename $filename .fa)
                echo "On sample : $base"
		cat $WDIR/results_$GENE/parsed_last_output/${base}/reads_missing_exons.bed | awk -v CHR="$CHR" -v GENE_START="$GENE_START" -v GENE_END="$GENE_END" 'BEGIN{{OFS="\t"}}{{if($1==CHR && $2>=GENE_START && $3<=GENE_END){{print $0}}}}' > $WDIR/results_$GENE/parsed_last_output/${base}/reads_missing_exons_gene_boundaries.bed
	done

echo "Generating BedGraph and extra information for a particular libraries" 

for filename in $EXAMPLES/*.fa
        do
                base=$(basename $filename .fa)
                echo "On sample : $base"

		python3 -u $SCRIPTS/novel_exons_per_library.py \
		$WDIR/results_$GENE/parsed_last_output/${base}/reads_missing_exons_gene_boundaries.bed \
		$CHROM_SIZES ${base} \
		$WDIR/results_$GENE/bedgraph_info_novel_exons/${base}.BedGraph \
		$WDIR/results_$GENE/bedgraph_info_novel_exons/${base}.extended_info.txt 

		touch $WDIR/results_$GENE/bedgraph_info_novel_exons/${base}.novel_exons_per_library.COMPLETED
	done


echo "Generating the summary file with all the regions covered by at least one read in a one library"

python3 -u $SCRIPTS/novel_exons_summary.py $WDIR/results_$GENE/bedgraph_info_novel_exons \
temp_file $WDIR/results_$GENE/bedgraph_info_novel_exons/novel_exons_summary.txt 

rm temp_file

echo "Generating BedGraph file from summary (extracting columns 1-3 and 28, which is the last column, removing header, adding track info)"

echo 'track type=bedGraph name="Novel_Exons_for_"$GENE" description="Novel_Exons_for_"$GENE" visibility=full color=0,0,0 altColor=0,0,0 priority=20' > $WDIR/results_$GENE/bedgraph_info_novel_exons/sum.BedGraph
cat $WDIR/results_$GENE/bedgraph_info_novel_exons/novel_exons_summary.txt | tail -n +2 | awk 'BEGIN{{OFS="\t"}}{{print $1, $2, $3, $NF}}' >> $WDIR/results_$GENE/bedgraph_info_novel_exons/sum.BedGraph

echo "Function to return a string depending if the gene is on positive or negative strand"
echo "This rule generate a file with positions of novel exons (irrespectively of the amount of reads covering particular exons), together with exon names"

if [[ $STRAND == '+' ]]
then # if/then branch
  cat $WDIR/results_$GENE/bedgraph_info_novel_exons/novel_exons_summary.txt | bedtools merge -i - | sort -k1,1 -k2,2n -k3,3n | awk 'BEGIN{{OFS="\t"}}{{print $1, $2+1, $3, $4="novel_exon"(FNR)}}' > $WDIR/results_$GENE/meta_gene_construction/novel_exons_coordinates_1nt.txt
else
  cat $WDIR/results_$GENE/bedgraph_info_novel_exons/novel_exons_summary.txt | bedtools merge -i - | sort -k1,1 -k2,2nr -k3,3nr | awk 'BEGIN{{OFS="\t"}}{{print $1, $2+1, $3, $4="novel_exon"(FNR)}}' > $WDIR/results_$GENE/meta_gene_construction/novel_exons_coordinates_1nt.txt
fi

echo "Generating files with meta-gene and genomic coordinates of exons (coordinates in 1-based format)"

python3 -u $SCRIPTS/exons_coordinates.py $EXISTING_EXONS \
$WDIR/results_$GENE/meta_gene_construction/novel_exons_coordinates_1nt.txt \
$STRAND $WDIR/results_$GENE/meta_gene_construction/meta_gene_genomic_exon_coordinates.txt

echo "Generating UTR annotations from the GTF file and creating a bed file"

cat $ANNOTATIONS | grep $GENE_ID | awk '$3 == "UTR"' | awk '{print $1"\t"$4"\t"$5}' > $WDIR/input/"$GENE"_UTR_all.bed  #extracting all UTRs in a BED format
cat $ANNOTATIONS | grep $GENE_ID | awk '$3 == "CDS"' | awk '{print $1"\t"$4"\t"$5}' > $WDIR/input/"$GENE"_CDS_all.bed  #extracting all CDSs in a BED format

#subtracting the CDS blocks from UTR blocks 

bedtools subtract -a $WDIR/input/"$GENE"_UTR_all.bed -b $WDIR/input/"$GENE"_CDS_all.bed > $WDIR/input/"$GENE"_UTR_only.bed

#converting tab separators to space separators
sed -e 's/\t/ /g' $WDIR/input/"$GENE"_UTR_only.bed > $WDIR/input/"$GENE"_UTR_only_tab.bed

echo "Annotating the genomic coordinates of exons with UTR annotaions" 

Rscript $SCRIPTS/UTR_anno.R -f $WDIR/results_$GENE/meta_gene_construction/meta_gene_genomic_exon_coordinates.txt \
-u $WDIR/input/"$GENE"_UTR_only_tab.bed -o $WDIR/results_$GENE/meta_gene_construction/meta_gene_genomic_exon_coordinates.txt

sed -i 's/NA\tNA/NA/g' $WDIR/results_$GENE/meta_gene_construction/meta_gene_genomic_exon_coordinates.txt
